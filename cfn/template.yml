AWSTemplateFormatVersion: '2010-09-09'

Description: This template creates a VPC, Elasticache and a lambda function.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  ElastiCachePort:
    Type: String
    Default: '6379'
    Description: Post for your Amazon ElastiCache instance

  DashboardTimezone:
    Type: String
    Default: 'America/New_York'
    Description: Timezone for your dashboard (e.g. America/Chicago, Europe/Copenhagen)

Mappings: 
  AmiMap:
    us-east-1:
      "64" : "ami-1853ac65"
    us-east-2:
      "64" : "ami-25615740" 
    us-west-1: 
      "64" : "ami-bf5540df"
    us-west-2:
      "64" : "ami-d874e0a0"
    ca-central-1:
      "64" : "ami-5b55d23f"
    eu-west-1:
      "64" : "ami-3bfab942"
    eu-west-2:
      "64" : "ami-dff017b8"
Resources:    
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackId'
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: PublicSubnet2
  NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: AttachGateway
        Properties: 
            Domain: vpc
  NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: AttachGateway
        Properties: 
            Domain: vpc
  NatGateway1: 
      Type: AWS::EC2::NatGateway
      Properties: 
          AllocationId: !GetAtt NatGateway1EIP.AllocationId
          SubnetId: !Ref PublicSubnet1
  NatGateway2: 
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway2EIP.AllocationId
          SubnetId: !Ref PublicSubnet2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: PrivateSubnet2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGateway1'
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGateway2'
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'RouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'RouteTable'
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'RouteTable'
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateRouteTable1'
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateRouteTable2'
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundSSHNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  InternalAllNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '200'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.0.0/16
  OutBoundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutInternalAllNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '200'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.0.0.0/16
  SubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      NetworkAclId: !Ref 'NetworkAcl'
  SubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      NetworkAclId: !Ref 'NetworkAcl'
  SubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      NetworkAclId: !Ref 'NetworkAcl'
  SubnetNetworkAclAssociation4:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      NetworkAclId: !Ref 'NetworkAcl'            
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable Redis access 
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable HTTP access to service
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable HTTP access to ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable Redis access 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref EcsSecurityGroup
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
  RedisSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: The Subnet Group for the redis cluster
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  RedisCluster:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      AutoMinorVersionUpgrade: true
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName:  !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: 3.2.6
      NumCacheNodes: 1
      Port: !Ref ElastiCachePort
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
  EcrBackendRepository:
    Type: "AWS::ECR::Repository"
    Properties: 
      RepositoryName: !Sub ${AWS::StackName}-backend
  EcrDashboardRepository:
    Type: "AWS::ECR::Repository"
    Properties: 
      RepositoryName: !Sub ${AWS::StackName}-dashboard
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0    
  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        -  arn:aws:iam::aws:policy/AdministratorAccess
  BastionProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles:
        - !Ref BastionRole
  BastionInstance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - AttachGateway
      - EcrBackendRepository
      - EcrDashboardRepository
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              git: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackId', '

                    ', region=, !Ref 'AWS::Region', '

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.BastionInstance.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
                  '         --resource BastionInstance ', '         --region ',
                  !Ref 'AWS::Region', '

                    ', 'runas=root

                    ']]
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", "64"]
      InstanceType: 't2.medium'
      IamInstanceProfile: !Ref 'BastionProfile'
      KeyName: !Ref 'KeyName'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'InstanceSecurityGroup'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref 'PublicSubnet1'
  CodeBucket:
    Type: "AWS::S3::Bucket"
    Properties: 
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
Outputs:
  CodeBucket:
    Description: The bucket holding the lambda ZIP files
    Value: !Ref CodeBucket
  EcrBackendRepository:
    Description: The ECR Repository Uri
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrBackendRepository}
    Export: 
      Name: !Sub ${AWS::StackName}-EcrBackendRepositoryUri
  EcrDashboardRepository:
    Description: The ECR Repository Uri
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDashboardRepository}
    Export: 
      Name: !Sub ${AWS::StackName}-EcrDashboardRepositoryUri
  RedisEndpoint:
    Description: RedisEndpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export: 
      Name: !Sub ${AWS::StackName}-RedisEndpoint
  RedisPort:
    Description: RedisPort
    Value: !GetAtt RedisCluster.RedisEndpoint.Port
    Export: 
      Name: !Sub ${AWS::StackName}-RedisPort
  VPCId:
    Description: VPC
    Value: !Ref VPC
    Export: 
      Name: !Sub ${AWS::StackName}-VPCId
  PublicSubnet1:
    Description: PublicSubnet1
    Value: !Ref PublicSubnet1
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet1
  PublicSubnet2:
    Description: PublicSubnet2
    Value: !Ref PublicSubnet2
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet2
  PrivateSubnet1:
    Description: PrivateSubnet1
    Value: !Ref PrivateSubnet1
    Export: 
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
  PrivateSubnet2:
    Description: PrivateSubnet2
    Value: !Ref PrivateSubnet2
    Export: 
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
  EcsSecurityGroup:
    Description: EcsSecurityGroup
    Value: !Ref EcsSecurityGroup
    Export: 
      Name: !Sub ${AWS::StackName}-EcsSecurityGroup
  ALBSecurityGroup:
    Description: ALBSecurityGroup
    Value: !Ref ALBSecurityGroup
    Export: 
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
  LambdaSecurityGroup:
    Description: LambdaSecurityGroup
    Value: !Ref LambdaSecurityGroup
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaSecurityGroup
  AWSRegion:
    Description: AWS Region Stack is Running
    Value: !Sub ${AWS::Region}
    Export: 
      Name: !Sub ${AWS::StackName}-AWSRegion
  HostIP:
    Description: The IP address of the instance
    Value: !GetAtt BastionInstance.PublicIp
  PublicSubnet1:
    Description: PublicSubnet for ECS
    Value: !Ref PublicSubnet1
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet1 
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Value: !Ref KeyName
    Export: 
      Name: !Sub ${AWS::StackName}-KeyName
  DashboardTimezone:
    Description: Timezone for your dashboard
    Value: !Ref DashboardTimezone
    Export:
      Name: !Sub ${AWS::StackName}-DashboardTimezone
